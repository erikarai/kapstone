"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactMultiEmail = void 0;
var React = __importStar(require("react"));
var isEmail_1 = require("./isEmail");
var initialEmailAddress = function (emails) {
    if (typeof emails === 'undefined')
        return [];
    var validEmails = emails.filter(function (email) { return (0, isEmail_1.isEmail)(email); });
    return validEmails;
};
function ReactMultiEmail(props) {
    var _this = this;
    var id = props.id, style = props.style, _a = props.className, className = _a === void 0 ? '' : _a, noClass = props.noClass, placeholder = props.placeholder, autoFocus = props.autoFocus, _b = props.allowDisplayName, allowDisplayName = _b === void 0 ? false : _b, _c = props.stripDisplayName, stripDisplayName = _c === void 0 ? false : _c, _d = props.allowDuplicate, allowDuplicate = _d === void 0 ? false : _d, _e = props.delimiter, delimiter = _e === void 0 ? "[".concat(allowDisplayName ? '' : ' ', ",;]") : _e, _f = props.initialInputValue, initialInputValue = _f === void 0 ? '' : _f, inputClassName = props.inputClassName, autoComplete = props.autoComplete, getLabel = props.getLabel, enable = props.enable, onDisabled = props.onDisabled, validateEmail = props.validateEmail, onChange = props.onChange, onChangeInput = props.onChangeInput, onFocus = props.onFocus, onBlur = props.onBlur, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, spinner = props.spinner, _g = props.disableOnBlurValidation, disableOnBlurValidation = _g === void 0 ? false : _g;
    var emailInputRef = React.useRef(null);
    var _h = __read(React.useState(false), 2), focused = _h[0], setFocused = _h[1];
    var _j = __read(React.useState([]), 2), emails = _j[0], setEmails = _j[1];
    var _k = __read(React.useState(initialInputValue), 2), inputValue = _k[0], setInputValue = _k[1];
    var _l = __read(React.useState(false), 2), spinning = _l[0], setSpinning = _l[1];
    var findEmailAddress = React.useCallback(function (value, isEnter) { return __awaiter(_this, void 0, void 0, function () {
        var validEmails, inputValue, re, isEmail, addEmails, setArr, arr, validateResult, validateResultWithDisplayName, email, validateResult, validateResultWithDisplayName, email;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    validEmails = [];
                    inputValue = '';
                    re = new RegExp(delimiter, 'g');
                    isEmail = validateEmail || isEmail_1.isEmail;
                    addEmails = function (email) {
                        if (!allowDuplicate) {
                            for (var i = 0, l = emails.length; i < l; i++) {
                                if (emails[i] === email) {
                                    return false;
                                }
                            }
                        }
                        validEmails.push(email);
                        return true;
                    };
                    if (!(value !== '')) return [3 /*break*/, 11];
                    if (!re.test(value)) return [3 /*break*/, 6];
                    setArr = new Set(value.split(re).filter(function (n) { return n; }));
                    arr = __spreadArray([], __read(setArr), false);
                    _b.label = 1;
                case 1:
                    validateResult = isEmail('' + arr[0]);
                    if (!(typeof validateResult === 'boolean')) return [3 /*break*/, 2];
                    if (validateResult) {
                        addEmails('' + arr.shift());
                    }
                    else {
                        if (arr.length === 1) {
                            if (allowDisplayName) {
                                validateResultWithDisplayName = isEmail('' + arr[0], { allowDisplayName: allowDisplayName });
                                if (validateResultWithDisplayName) {
                                    email = stripDisplayName ? (_a = arr.shift()) === null || _a === void 0 ? void 0 : _a.split('<')[1].split('>')[0] : arr.shift();
                                    addEmails('' + email);
                                }
                                else {
                                    if (arr.length === 1) {
                                        inputValue = '' + arr.shift();
                                    }
                                    else {
                                        arr.shift();
                                    }
                                }
                            }
                            else {
                                inputValue = '' + arr.shift();
                            }
                        }
                        else {
                            arr.shift();
                        }
                    }
                    return [3 /*break*/, 4];
                case 2:
                    // handle promise
                    setSpinning(true);
                    return [4 /*yield*/, (validateEmail === null || validateEmail === void 0 ? void 0 : validateEmail(value))];
                case 3:
                    if ((_b.sent()) === true) {
                        addEmails('' + arr.shift());
                        setSpinning(false);
                    }
                    else {
                        if (arr.length === 1) {
                            inputValue = '' + arr.shift();
                        }
                        else {
                            arr.shift();
                        }
                    }
                    _b.label = 4;
                case 4:
                    if (arr.length) return [3 /*break*/, 1];
                    _b.label = 5;
                case 5: return [3 /*break*/, 11];
                case 6:
                    if (enable && !enable({ emailCnt: emails.length })) {
                        onDisabled === null || onDisabled === void 0 ? void 0 : onDisabled();
                        return [2 /*return*/];
                    }
                    if (!isEnter) return [3 /*break*/, 10];
                    validateResult = isEmail(value);
                    if (!(typeof validateResult === 'boolean')) return [3 /*break*/, 7];
                    if (validateResult) {
                        addEmails(value);
                    }
                    else if (allowDisplayName) {
                        validateResultWithDisplayName = isEmail(value, { allowDisplayName: allowDisplayName });
                        if (validateResultWithDisplayName) {
                            email = stripDisplayName ? value.split('<')[1].split('>')[0] : value;
                            addEmails(email);
                        }
                        else {
                            inputValue = value;
                        }
                    }
                    else {
                        inputValue = value;
                    }
                    return [3 /*break*/, 9];
                case 7:
                    // handle promise
                    setSpinning(true);
                    return [4 /*yield*/, (validateEmail === null || validateEmail === void 0 ? void 0 : validateEmail(value))];
                case 8:
                    if ((_b.sent()) === true) {
                        addEmails(value);
                        setSpinning(false);
                    }
                    else {
                        inputValue = value;
                    }
                    _b.label = 9;
                case 9: return [3 /*break*/, 11];
                case 10:
                    inputValue = value;
                    _b.label = 11;
                case 11:
                    setEmails(__spreadArray(__spreadArray([], __read(emails), false), __read(validEmails), false));
                    setInputValue(inputValue);
                    if (validEmails.length) {
                        onChange === null || onChange === void 0 ? void 0 : onChange(__spreadArray(__spreadArray([], __read(emails), false), __read(validEmails), false));
                    }
                    if (inputValue !== inputValue) {
                        onChangeInput === null || onChangeInput === void 0 ? void 0 : onChangeInput(inputValue);
                    }
                    return [2 /*return*/];
            }
        });
    }); }, [
        allowDisplayName,
        allowDuplicate,
        delimiter,
        emails,
        enable,
        onChange,
        onChangeInput,
        onDisabled,
        stripDisplayName,
        validateEmail,
    ]);
    var onChangeInputValue = React.useCallback(function (value) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, findEmailAddress(value)];
                case 1:
                    _a.sent();
                    onChangeInput === null || onChangeInput === void 0 ? void 0 : onChangeInput(value);
                    return [2 /*return*/];
            }
        });
    }); }, [findEmailAddress, onChangeInput]);
    var removeEmail = React.useCallback(function (index, isDisabled) {
        if (isDisabled) {
            return;
        }
        var _emails = __spreadArray(__spreadArray([], __read(emails.slice(0, index)), false), __read(emails.slice(index + 1)), false);
        setEmails(_emails);
        onChange === null || onChange === void 0 ? void 0 : onChange(_emails);
    }, [emails, onChange]);
    var handleOnKeydown = React.useCallback(function (e) {
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
        switch (e.key) {
            case 'Enter':
                e.preventDefault();
                break;
            case 'Backspace':
                if (!e.currentTarget.value) {
                    removeEmail(emails.length - 1, false);
                }
                break;
            default:
        }
    }, [emails.length, onKeyDown, removeEmail]);
    var handleOnKeyup = React.useCallback(function (e) { return __awaiter(_this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp(e);
                    _a = e.key;
                    switch (_a) {
                        case 'Enter': return [3 /*break*/, 1];
                    }
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, findEmailAddress(e.currentTarget.value, true)];
                case 2:
                    _b.sent();
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); }, [findEmailAddress, onKeyUp]);
    var handleOnChange = React.useCallback(function (e) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, onChangeInputValue(e.currentTarget.value)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); }, [onChangeInputValue]);
    var handleOnBlur = React.useCallback(function (e) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    setFocused(false);
                    if (!!disableOnBlurValidation) return [3 /*break*/, 2];
                    return [4 /*yield*/, findEmailAddress(e.currentTarget.value, true)];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2:
                    onBlur === null || onBlur === void 0 ? void 0 : onBlur();
                    return [2 /*return*/];
            }
        });
    }); }, [disableOnBlurValidation, findEmailAddress, onBlur]);
    var handleOnFocus = React.useCallback(function () {
        setFocused(true);
        onFocus === null || onFocus === void 0 ? void 0 : onFocus();
    }, [onFocus]);
    React.useEffect(function () {
        setEmails(initialEmailAddress(props.emails));
    }, [props.emails]);
    return (React.createElement("div", { className: "".concat(className, " ").concat(noClass ? '' : 'react-multi-email', " ").concat(focused ? 'focused' : '', " ").concat(inputValue === '' && emails.length === 0 ? 'empty' : ''), style: style, onClick: function () { var _a; return (_a = emailInputRef.current) === null || _a === void 0 ? void 0 : _a.focus(); } },
        spinning && (spinner === null || spinner === void 0 ? void 0 : spinner()),
        placeholder ? React.createElement("span", { "data-placeholder": true }, placeholder) : null,
        React.createElement("div", { className: 'data-labels', style: { opacity: spinning ? 0.45 : 1.0, display: 'contents', flexWrap: 'inherit' } }, emails.map(function (email, index) { return getLabel(email, index, removeEmail); })),
        React.createElement("input", { id: id, style: { opacity: spinning ? 0.45 : 1.0 }, ref: emailInputRef, type: 'text', value: inputValue, onFocus: handleOnFocus, onBlur: handleOnBlur, onChange: handleOnChange, onKeyDown: handleOnKeydown, onKeyUp: handleOnKeyup, autoFocus: autoFocus, className: inputClassName, autoComplete: autoComplete })));
}
exports.ReactMultiEmail = ReactMultiEmail;
